@MCOMMON@

srcdir =	.
VPATH = 	.
.PATH:		.

# one up
basedir = ..
# top dir
topdir = ..
# this dir relative to top dir
thisdir = src

DEBUG=@DEBUG@

GETTEXT_LIBS = @LIBINTL@

first_rule: all
dummy:

#
SRCS = \
		alloc.c \
		asfd.c \
		async.c \
		attribs.c \
		base64.c \
		berrno.c \
		bfile.c \
		bu.c \
		cmd.c \
		cntr.c \
		conf.c \
		conffile.c \
		cstat.c \
		forkchild.c \
		fsops.c \
		fzp.c \
		handy.c \
		hexmap.c \
		incexc_recv.c \
		incexc_send.c \
		iobuf.c \
		linkhash.c \
		lock.c \
		log.c \
		msg.c \
		pathcmp.c \
		prepend.c \
		prog.c \
		regexp.c \
		run_script.c \
		sbuf.c \
		slist.c \
		ssl.c \
		strlist.c \
		yajl_gen_w.c

OBJS = $(SRCS:.c=.o)
# FIX THIS: Should not need to add extra .o objects here.
SUBDIROBJS = \
		client/acl.o \
		client/auth.o \
		client/autoupgrade.o \
		client/backup.o \
		client/backup_phase1.o \
		client/ca.o \
		client/cvss.o \
		client/delete.o \
		client/extra_comms.o \
		client/extrameta.o \
		client/find.o \
		client/glob_windows.o \
		client/list.o \
		client/main.o \
		client/monitor/json_input.o \
		client/monitor/lline.o \
		client/monitor/sel.o \
		client/monitor/status_client_ncurses.o \
		client/monitor.o \
		client/protocol1/backup_phase2.o \
		client/protocol1/restore.o \
		client/protocol2/backup_phase2.o \
		client/protocol2/restore.o \
		client/restore.o \
		client/xattr.o \
		protocol1/handy.o \
		protocol1/msg.o \
		protocol1/rs_buf.o \
		protocol1/sbuf_protocol1.o \
		protocol2/blist.o \
		protocol2/blk.o \
		protocol2/rabin/rabin.o \
		protocol2/rabin/rconf.o \
		protocol2/rabin/win.o \
		protocol2/sbuf_protocol2.o \
		server/auth.o \
		server/autoupgrade.o \
		server/backup.o \
		server/backup_phase1.o \
		server/backup_phase3.o \
		server/bu_get.o \
		server/ca.o \
		server/child.o \
		server/compress.o \
		server/delete.o \
		server/diff.o \
		server/dpth.o \
		server/extra_comms.o \
		server/list.o \
		server/main.o \
		server/manio.o \
		server/manios.o \
		server/monitor/browse.o \
		server/monitor/cache.o \
		server/monitor/cstat.o \
		server/monitor/json_output.o \
		server/monitor/status_server.o \
		server/protocol1/backup_phase2.o \
		server/protocol1/backup_phase4.o \
		server/protocol1/bedup.o \
		server/protocol1/blocklen.o \
		server/protocol1/deleteme.o \
		server/protocol1/dpth.o \
		server/protocol1/fdirs.o \
		server/protocol1/link.o \
		server/protocol1/restore.o \
		server/protocol1/zlibio.o \
		server/protocol2/backup_phase2.o \
		server/protocol2/backup_phase4.o \
		server/protocol2/bsigs.o \
		server/protocol2/champ_chooser/candidate.o \
		server/protocol2/champ_chooser/champ_chooser.o \
		server/protocol2/champ_chooser/champ_client.o \
		server/protocol2/champ_chooser/champ_server.o \
		server/protocol2/champ_chooser/dindex.o \
		server/protocol2/champ_chooser/hash.o \
		server/protocol2/champ_chooser/incoming.o \
		server/protocol2/champ_chooser/scores.o \
		server/protocol2/champ_chooser/sparse.o \
		server/protocol2/dpth.o \
		server/protocol2/rblk.o \
		server/protocol2/restore.o \
		server/protocol2/restore_spool.o \
		server/quota.o \
		server/restore.o \
		server/rubble.o \
		server/run_action.o \
		server/sdirs.o \
		server/timestamp.o \
		server/resume.o \
		yajl/yajl_alloc.o \
		yajl/yajl_buf.o \
		yajl/yajl.o \
		yajl/yajl_encode.o \
		yajl/yajl_gen.o \
		yajl/yajl_lex.o \
		yajl/yajl_parser.o \
		yajl/yajl_tree.o \
		yajl/yajl_version.o \


# these are the objects that are changed by the .configure process
EXTRAOBJS = @OBJLIST@

FDLIBS = @FDLIBS@		  # extra libs for File daemon

# extra items for linking on Win32
WIN32OBJS = win32/winmain.o win32/winlib.a win32/winres.res
win32 = $(WIN32OBJS) -luser32 -lgdi32

WIN32LIBS = $(@WIN32@)

.SUFFIXES:	.c .o
.PHONY:
.DONTCARE:

# inference rules
.c.o:
#	@echo "Compiling $<"
	$(ECHO_CMD)$(CXX) $(DEFS) $(DEBUG) -c $(WCFLAGS) $(CPPFLAGS) -I$(srcdir) -I$(basedir) $(DINCLUDE) $(CFLAGS) $<
#-------------------------------------------------------------------------
all: Makefile @WIN32@ burp @STATIC@
	@echo "==== Make of burp is good ===="
	@echo " "

win32/winlib.a:
	@if test -f win32/Makefile -a "${GMAKE}" != "none"; then \
	   (cd win32; $(GMAKE) DESTDIR=$(DESTDIR)); \
	fi
	@rm -f burp.exe

win32/winmain.o:
	@if test -f win32/Makefile -a "${GMAKE}" != "none"; then \
	   (cd win32; $(GMAKE) DESTDIR=$(DESTDIR)); \
	fi
	@rm -f burp.exe

win32/winres.res:
	@if test -f win32/Makefile -a "${GMAKE}" != "none"; then \
	   (cd win32; $(GMAKE) DESTDIR=$(DESTDIR)); \
	fi
	@rm -f burp.exe

# win32 libraries if needed
win32:	$(WIN32OBJS)
	@if test -f win32/Makefile -a "${GMAKE}" != "none"; then \
	   (cd win32; $(GMAKE) DESTDIR=$(DESTDIR)); \
	fi
	@rm -f burp.exe

burp:  Makefile $(OBJS) $(SUBDIROBJS) @WIN32@
	@echo "Linking $@ ..."
	$(LIBTOOL_LINK) $(CXX) $(WLDFLAGS) $(LDFLAGS) -o $@ \
	$(SUBDIROBJS) $(OBJS) $(WIN32LIBS) $(FDLIBS) -lm $(LIBS) \
	  $(DLIB) $(WRAPLIBS) $(GETTEXT_LIBS) $(OPENSSL_LIBS) $(ZLIBS) $(NCURSES_LIBS) $(CRYPT_LIBS) $(RSYNC_LIBS)

static-burp: Makefile $(OBJS) $(SUBDIROBJS) @WIN32@
	$(LIBTOOL_LINK) $(CXX) $(WLDFLAGS) $(LDFLAGS) -static -o $@ \
	$(SUBDIROBJS) $(OBJS) $(WIN32LIBS) $(FDLIBS) -lm $(LIBS) \
	   $(DLIB) $(WRAPLIBS) $(GETTEXT_LIBS) $(OPENSSL_LIBS) $(ZLIBS) $(NCURSES_LIBS) $(CRYPT_LIBS) $(RSYNC_LIBS)

Makefile: $(srcdir)/Makefile.in $(topdir)/config.status
	cd $(topdir) \
	  && CONFIG_FILES=$(thisdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

libtool-clean:
	@$(RMF) -r .libs _libs

clean:	libtool-clean
	@$(RMF) burp core core.* a.out *.o *.bak *~ *.intpro *.extpro 1 2 3
	@$(RMF) static-burp config.h
	@$(RMF) Makefile
	@$(RMF) uthash.h
	@$(RMF) *.gcda *.gcno
#	@if test -f win32/Makefile -a "${GMAKE}" != "none"; then \
#	   (cd win32; $(GMAKE) clean); \
#	fi

realclean: clean
	@$(RMF) x

distclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)
	@if test -f win32/Makefile -a "${GMAKE}" != "none"; then \
	   (cd win32; $(GMAKE) distclean); \
	fi

devclean: realclean
	if test $(srcdir) = .; then $(MAKE) realclean; fi
	(cd $(srcdir); $(RMF) Makefile)
	@if test -f win32/Makefile -a "${GMAKE}" != "none"; then \
	   (cd win32; $(GMAKE) devclean); \
	fi

install: all
	$(LIBTOOL_INSTALL) $(INSTALL_PROGRAM) burp $(DESTDIR)$(sbindir)/burp
	$(LIBTOOL_INSTALL) $(INSTALL_PROGRAM) server/protocol1/vss_strip $(DESTDIR)$(sbindir)/vss_strip
	ln -sf burp $(DESTDIR)$(sbindir)/bedup
	ln -sf burp $(DESTDIR)$(sbindir)/bsigs
# Should do a static vss_strip too.
	@if test -f static-burp; then \
	   $(LIBTOOL_INSTALL) $(INSTALL_PROGRAM) static-burp $(DESTDIR)$(sbindir)/static-burp; \
	fi

uninstall:
	(cd $(DESTDIR)$(sbindir); $(RMF) burp static-burp)



# Semi-automatic generation of dependencies:
# Use gcc -MM because X11 `makedepend' doesn't work on all systems
# and it also includes system headers.
# `semi'-automatic since dependencies are generated at distribution time.

depend:
	@$(CXX) -S -M $(CPPFLAGS) $(XINC) -I$(srcdir) -I$(basedir) $(SQL_INC) *.c >> Makefile
	@if ! test -f Makefile ; then \
	   echo " ===== Something went wrong in make depend ====="; \
	fi

# -----------------------------------------------------------------------
# DO NOT DELETE: nice dependency list follows
