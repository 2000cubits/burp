#!/bin/bash

myscript=$(basename $0)
if [ ! -f "$myscript" ] ; then
	echo "Please run $myscript whilst standing in the same directory" 1>&2
	exit 1
fi

target="$1"
burpbin="$2"
clientconf="$3"
clientconfarg="$4"
includedir="$5"
restoredir="$6"
serveraddress="$7"
sshclient="$8"

if [ -z "$target" ] ; then
	echo "target directory not given."
	exit 1
fi
if [ -z "$burpbin" ] ; then
	echo "location of burp binary not given."
	exit 1
fi
if [ -z "$clientconf" ] ; then
	echo "location of client config file not given."
	exit 1
fi
if [ -z "$clientconfarg" ] ; then
	echo "client config arg not given."
	exit 1
fi
if [ -z "$includedir" ] ; then
	echo "location of directory to backup not given ."
	exit 1
fi
if [ -z "$restoredir" ] ; then
	echo "location of directory to restore to not given ."
	exit 1
fi
if [ -z "$serveraddress" ] ; then
	echo "server address not given ."
	exit 1
fi

# The Windows build symlinks cock things for 'diff -ur' on the restore later,
# so delete them first.
rm -f ../burp-depkgs
rm -f ../burp-cross-tools

excludedir="$includedir/src"
logs="$PWD/logs"
serverlog="$logs/server.log"
clientlog="$logs/client.log"
beduplog="$logs/bedup.log"
difflog="$logs/diff.log"
serverpid=
serverconf=etc/burp/burp-server.conf
fsize=1024

kill_server()
{
	if [ -n "$serverpid" ] ; then
		echo "Killing test server"
		kill -9 $serverpid
		serverpid=
	fi
}

trap "kill_server" 0 1 2 3 15

fail()
{
	echo
	echo "Test failed: $@"
	echo
	kill_server
	exit 1
}

makedir()
{
	rm -rf "$1"
	mkdir -p "$1" || fail "could not mkdir $1"
}

makedir_client()
{
	$sshclient rm -rf "$1"
	$sshclient mkdir -p "$1" || fail "could not mkdir $1"
}

cdir()
{
	cd "$1" || fail "could not cd to $1"
}

sed_rep()
{
	sed -i -e "$1" "$2" || fail "sed $1 failed $2f"
}

sed_rep_client()
{
	$sshclient sed -i -e \'"$1"\' "$2" || fail "sed $1 failed $2f"
}

sed_rep_both()
{
	sed_rep_client "$1" "$clientconf"
	sed_rep "$1" "$serverconf"
}

run_bedup()
{
	echo "Starting test bedup"
	./usr/sbin/bedup -c "$serverconf" -l >> "$beduplog" 2>&1 \
		|| fail "bedup returned $?"
}

run_backup()
{
	local waited=0
	local working="$target/var/spool/burp/testclient/working"
	local finishing="$target/var/spool/burp/testclient/finishing"
	SLEEPTIME=2

	echo "Starting test client backup"
	$sshclient "$burpbin" -c "$clientconfarg" -a b >> "$clientlog" 2>&1 \
		|| fail "client backup returned $?"

	# Repeatedly check to see whether the server has finished, rather
	# than just sleeping some length of time. 
	while true ; do
		sleep $SLEEPTIME
		[ ! -e "$working" -a ! -e "$finishing" ] \
			&& sleep $SLEEPTIME && break
		waited=$((waited+$SLEEPTIME))
		[ "$waited" -gt 120 ] && \
		  fail "client backup seemed to be complete after 2 minutes"
	done
}

run_verify()
{
	local num="$1"
	echo "Starting test client verify of backup $num"
	$sshclient "$burpbin" -c "$clientconfarg" -a v -b "$num" \
		>> "$clientlog" 2>&1 || fail "client verify returned $?"
}

run_restore()
{
	local num="$1"
	local dir="$2"
	echo "Starting test client restore of backup $num"
	makedir_client "$dir"
	$sshclient "$burpbin" -c "$clientconfarg" -a r -b "$num" -d "$dir" \
		>>"$clientlog" 2>&1 || fail "client restore returned $?"
}

write_message()
{
	message="$1"
	echo "$message"
	echo "$message" >> $serverlog
	echo "$message" >> $clientlog
	echo "$message" >> $difflog
	echo "$message" >> $beduplog
}

start_test()
{
	write_message "
Test $1
$2"
}

end_test()
{
	write_message "Test $1 OK"
}

change_source_files()
{
	$sshclient cp -r "$includedir/src" "$includedir/src-new" \
		|| fail "could not cp $includedir/src to $includedir/src-new"

	# Move a directory, which simulates deleting and adding new files.
	if $sshclient [ -d "$includedir/debian" ] \
	 && [ ! -e "$includedir/debian-new" ] ; then
	   $sshclient mv "$includedir/debian" "$includedir/debian-new" \
	    || fail "could not move $includedir/debian to $includedir/debian-new"
	elif [ ! -e "$includedir/debian" ] \
	 && [ -d "$includedir/debian-new" ] ; then
	   $sshclient mv "$includedir/debian-new" "$includedir/debian" \
	    || fail "could not move $includedir/debian-new to $includedir/debian"
	else
		fail "could not move debian directories" 
	fi

	# Scramble a whole bunch of files
	$sshclient find "$includedir/autoconf" -type f | while read f ; do \
		LC_ALL='C' sort --random-sort "$f" > tmpfile \
			|| fail "could not randomise $f" ; \
		mv tmpfile "$f" || fail "could not move tmpfile to $f" ; \
	done
}

compression_off()
{
	sed_rep 's/^compression = .*//g' "$serverconf"
	echo "compression = 0" >> "$serverconf"
}

compression_on()
{
	sed_rep 's/^compression = .*//g' "$serverconf"
	echo "compression = 9" >> "$serverconf"
}

encryption_off()
{
	sed_rep_client 's/^encryption_password = .*//g' "$clientconf"
}

encryption_on()
{
	encryption_off
	$sshclient echo "encryption_password = 7djh34nmm$sd" >> "$clientconf"
}

min_file_size_off()
{
	sed_rep_client 's/^min_file_size = .*//g' "$clientconf"
}

min_file_size_on()
{
	min_file_size_off
	$sshclient echo "min_file_size = $fsize" >> "$clientconf"
}

max_file_size_off()
{
	sed_rep_client 's/^max_file_size = .*//g' "$clientconf"
}

max_file_size_on()
{
	max_file_size_off
	$sshclient echo "max_file_size = $fsize" >> "$clientconf"
}

exclude_off()
{
	sed_rep_client 's/^exclude = .*//g' "$clientconf"
}

exclude_on()
{
	exclude_off
	$sshclient echo "exclude = $excludedir" >> "$clientconf"
}

include_off()
{
	sed_rep_client 's/^include = .*//g' "$clientconf"
}

include_on()
{
	include_off
	$sshclient sed -i '$ a'"include = $includedir" $clientconf
}

include_ext_off()
{
	sed_rep_client 's/^include_ext = c//g' "$clientconf"
}

include_ext_on()
{
	include_ext_off
	$sshclient echo "include_ext = c" >> "$clientconf"
}

exclude_ext_off()
{
	sed_rep_client 's/^exclude_ext = c//g' "$clientconf"
}

exclude_ext_on()
{
	exclude_ext_off
	$sshclient echo "exclude_ext = c" >> "$clientconf"
}

normal_settings()
{
echo a
	compression_on
echo b
	encryption_off
echo c
	max_file_size_off
echo d
	min_file_size_off
echo e
	exclude_off
echo f
	include_on
echo g
	include_ext_off
echo h
	exclude_ext_off
echo i
}

makedir "$logs"

cdir "$target"

# Tweak the example configuration files by removing the leading '/' from all
# the paths, and changing the port numbers.
sed_rep_both "s#= /#= $target/#g"
sed_rep_both 's/port = 4971/port = 4998/g'
sed_rep_both 's/port = 4972/port = 4999/g'
sed_rep "s#^CA_DIR.*#CA_DIR = $target/etc/burp/CA#g" "$target/etc/burp/CA.cnf"
sed_rep_both 's/^stdout = .*/stdout = 1/g'
sed_rep_both 's/^syslog = .*/syslog = 0/g'
sed_rep_client "s/^server = .*/server = $serveraddress/g" "$clientconf"
sed_rep_client "s/^cname = .*/cname = testclient/g" "$clientconf"
sed_rep_client "s/^password = .*/password = abcdefgh/g" "$clientconf"

echo
echo "Starting tests"
echo "       Server log: $serverlog"
echo "       Client log: $clientlog"
echo "        Bedup log: $beduplog"
echo "         Diff log: $difflog"
echo "More logs can be found in:"
echo "$target/var/spool/burp/testclient/<backup number>"
echo

echo "Initialising server certificate authority"
# Need to do this outside of the server, because it might take a long time.
./usr/sbin/burp -c "$serverconf" -g >> "$serverlog" 2>&1 || fail "Initialising server certificate authority failed"
echo

# Start up the server
echo "Starting test server"
./usr/sbin/burp -c "$serverconf" -F >> "$serverlog" 2>&1 &
serverpid=$!

# Be kind, and wait a little for it to start.
sleep 5


# ----- Test 1 -----
start_test 1 "First backup/restore comparison"
normal_settings
run_backup
# Verify the specific backup number 1. Later tests will use 'all', which will
# verify all available backups. Might as well test both methods.
run_verify 1
run_restore 1 "$restoredir"1
$sshclient diff -ur "$includedir" "$restoredir"1/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore differed from the original!"
end_test 1

# ----- Test 2 -----
start_test 2 "Second backup/restore comparison"
normal_settings
run_backup
run_verify all
# There should be no 'data' directory left in the first backup directory,
# because all the files should have moved over into the second backup
# directory.
backuppath1=$(echo "$target"/var/spool/burp/testclient/0000001*)
backuppath2=$(echo "$target"/var/spool/burp/testclient/0000002*)
[ -d "$backuppath1"/data ] \
	&& fail "something changed between backup 1 and backup 2!"
diff -ur "$backuppath1"/manifest.gz "$backuppath2/manifest.gz" \
	>>"$difflog" 2>&1 \
		|| fail "manifests changed between backup 1 and backup 2!"
# Make sure that restoring from either backup gives the same result.
run_restore 1 "$restoredir"1
run_restore 2 "$restoredir"2
$sshclient diff -ur "$includedir" "$restoredir"1/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 1 differed from the original!"
$sshclient diff -ur "$restoredir"1/"$includedir" "$restoredir"2/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 1 and 2 differ!"
end_test 2

# ----- Test 3 -----
start_test 3 "Third backup/restore comparison, with changes"
normal_settings
change_source_files
run_backup
run_verify all
run_restore 3 "$restoredir"3
$sshclient diff -ur "$includedir" "$restoredir"3/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 3 differed from the original!"
# Make sure that restoring backup number 2 gives the same as restoring backup
# number 2 gave in test 2.
run_restore 2 "$restoredir"4
$sshclient diff -ur "$restoredir"2/"$includedir" "$restoredir"4/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 2 and 4 differ!"
end_test 3

# ----- Test 4 -----
start_test 4 "Deduplication, backup/restore comparison"
normal_settings
run_bedup
run_verify all
run_restore 3 "$restoredir"4
$sshclient diff -ur "$includedir" "$restoredir"4/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 4 differed from the original!"
# Make sure that restoring backup number 2 gives the same as restoring backup
# number 2 gave in test 2.
run_restore 2 "$restoredir"4
$sshclient diff -ur "$restoredir"2/"$includedir" "$restoredir"4/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 2 and 4 differ!"
# Run another backup, so we can continue to refer to them by the same number
# as the test number (easier on the brain).
run_backup
end_test 4

# ----- Test 5 -----
start_test 5 "Turn compression off, change files, backup/restore comparison"
compression_off
encryption_off
max_file_size_off
min_file_size_off
change_source_files
run_backup
run_verify all
run_restore 5 "$restoredir"5
$sshclient diff -ur "$includedir" "$restoredir"5/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 5 differed from the original!"
end_test 5

# ----- Test 6 -----
start_test 6 "Turn compression off, encryption on, change files, backup/restore comparison"
normal_settings
compression_off
encryption_on
change_source_files
run_backup
run_verify all
run_restore 6 "$restoredir"6
$sshclient diff -ur "$includedir" "$restoredir"6/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 6 differed from the original!"
end_test 6

# ----- Test 7 -----
start_test 7 "Turn compression on, encryption on, change files, backup/restore comparison"
normal_settings
compression_on
encryption_on
change_source_files
run_backup
run_verify all
run_restore 7 "$restoredir"7
$sshclient diff -ur "$includedir" "$restoredir"7/"$includedir" >>"$difflog" 2>&1 \
	|| fail "client restore 7 differed from the original!"
end_test 7

# ----- Test 8 -----
start_test 8 "Min file size, backup/restore comparison"
normal_settings
min_file_size_on
change_source_files
run_backup
run_verify all
run_restore 8 "$restoredir"8
f=$($sshclient find "$restoredir"8 -size -${fsize}c -type f)
[ -n "$f" ] && fail "found file sizes greater than $fsize: $f"
end_test 8

# ----- Test 9 -----
start_test 9 "Max file size, backup/restore comparison"
normal_settings
max_file_size_on
change_source_files
run_backup
run_verify all
run_restore 9 "$restoredir"9
f=$($sshclient find "$restoredir"9 -size +${fsize}c -type f)
[ -n "$f" ] && fail "found file sizes less than $fsize: $f"
end_test 9

# ----- Test 10 -----
start_test 10 "Exclude directory, backup/restore comparison"
normal_settings
exclude_on
run_backup
run_verify all
run_restore 10 "$restoredir"10
$sshclient [ -d "$restoredir"10/$excludedir ] && fail "$excludedir should not have been restored!"
$sshclient [ ! -d "$restoredir"10/$includedir ] && fail "$includedir should have been restored!"
end_test 10

# ----- Test 11 -----
start_test 11 "Exclude extension, backup/restore comparison"
normal_settings
exclude_ext_on
run_backup
run_verify all
run_restore 11 "$restoredir"11
f=$($sshclient find "$restoredir"11 -type f -name '*.c')
[ -n "$f" ] && fail "$restoredir11 should not contain any '.c' files"
end_test 11

# ----- Test 12 -----
start_test 12 "Include extension, backup/restore comparison"
normal_settings
include_ext_on
run_backup
run_verify all
run_restore 12 "$restoredir"12
f=$($sshclient find "$restoredir"12 -type f -name '*.h')
[ -n "$f" ] && fail "$restoredir12 should not contain any '.h' files"
f=$($sshclient find "$restoredir"12 -type f -name '*.c')
[ -z "$f" ] && fail "$restoredir12 should contain '.c' files"
end_test 12

echo
echo "All tests succeeded"
echo

exit 0
