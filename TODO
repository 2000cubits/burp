(in no particular order)

* Make SSL_shutdown() work properly.

* Investigate HFS / resource forks and make support. I think this might
  need somebody to buy me a Mac.

* Add include/exclude wildcards.

* Think about adding a utility to create certs, like easy-rsa from OpenVPN.
	(burp_ca has been added - does more need to be done?)

* Add acl/xattr support
	(generic linux and freebsd support is done - do solaris next)

* Improve the status monitor / counters.
	- Estimates:
		+ Should include the final jiggling around time.
		+ Currently go a bit wonky during resume.
		+ Don't show up on restore/verify.
	- Client knows no counters when resuming, because it didn't do the
	  phase1 scan. Have the server send it the counters.
	- Can something be done to make key presses more responsive?
	- When lots of clients are backing up, the live status monitor
	  truncates information.
	- Have a way of browsing backup contents.
	- Have a way of viewing logs.
	- Make a web interface.

* Do not compress manifests and logs when compression is turned off.

* Allow random backups to be deleted safely when hardlinked_archive is on.

* Delete old backups by time.

* Delete old backups by space.

* Add the option to turn an existing hardlinked_archive (not 'current') into
  a non-hardlinked_archive, and vice versa. This could be useful for deleting
  backups out of the middle of a chain instead of just the oldest.

* Get metadata transfers to use librsync.

* Have an option to let the client give the server the encryption password
  and hence do server-side encryption. This would mean that network deltas
  with encryption can be done.

* Try to make backup_phase4_server more efficient. For example, a storage
  server using a CIFS mounted disk appears very slow when I have a backup
  containing 1,500,000 small files with very few changes.
  (This may have been exacerbated by working dir recovery 'merge'. With
   'resume', it may be fairly improved).

* Investigate Windows 'bare metal restore'.

* Think about having a 'friendly' way of doing restores, as I have known some
  people to complain about having to type things on the command line.

* Break the stupidly long find_files() function down into smaller pieces.
  (partly done)

* Maybe look at the timer script regularly. If the time is now out of the
  defined range, interrupt the backup in such a way that it will pick up from
  where it left off the next time round.

* Make transfer_gzfile_in() and send_whole_file[_gz]() check checksums.

* Windows non-VSS backups.

* Investigate how to make massive files work better with librsync.

* Add localisation/gettext.

* Add localisation/gettext specifically to work around the Polish Windows XP
  "schtasks.exe Co_minutÄ™" problem.

* Get EFS backup/restore working on Windows (FILE_ATTRIBUTE_ENCRYPTED, and
  special open/read/close functions).

* Add automatic tests to verify that acl/xattr backup/restore works properly.
  Is probably a bit trickier than other tests, because it has to be different
  on different systems.

* Make sure behaviour is sensible when a client runs out of storage
  directories. It is programmed to loop to the start, but it will currently
  overwrite existing files (see section that calls incr_dpth() in
  backup_phase2_server()).

* Restore / verify email notifications.

* Add the ability to specify things like includes/excludes on the server side.
  Will probably work by downloading chunks of config to the client.

* Add option to strip off leading path components on restore.

* Add option to take a list of paths for restore.

* Add option to set up a restore on the server side.

* Add Bas van den Dikkenberg's patches for Debian.

* In the test script, check whether the backup has finished before going on
  to the next step (rather than waiting 10 seconds and then possibly failing).
